"""
    AbstractTiling{In,OUT} end where {IN<:Number,OUT}

An `AbstractTiling` is some tiling over ℝ^n.
"""
abstract type AbstractTiling{IN<:Number,OUT} end

"""
    features(t::AbstractTiling)::Int

Return the number of features in a feature vector generated by the `AbstractTiling`.
"""
function features(t::AbstractTiling)::Int
    error("features not implemented for AbstractTile $(typeof(t))")
end


"""
    index(t::AbstractTiling{T}, a::AbstractArray{T, N}) where {T,N}

Compute the index of the tile into which `a` falls.

This function is able to encode batches of data. If a batch is used,
then the last dimension is taken as the dimension along which to tile
code, and all other dimensions are considered batch dimensions. For
example, if the input is a matrix, then each row should be a vector in
the batch to tile code, and each column should correspond to some
feature.

# Returns
For input `a` having more than 1 dimension, the returned value is an
array of `Int`s having one less dimension than `a`. For example, for a `Matrix` of
observations, a `Vector{Int}` is returned. If `a` is a vector
then a single `Int` is returned.

"""
function index(t::AbstractTiling{T}, ::AbstractArray{T,N}) where {T,N}
    error("index not implemented for AbstractTiling $(typeof(t))")
end

"""
    onehot(t::TileCoder{T}, v::Vector{T})::Vector{T} where {T<:Number}

Compute the onehot representation of `v` when encoded with `t`.
"""
function onehot end

"""
    nonzero(t::AbstractTiling)::Int

Returns the number of nonzero elements in the tile coded representation
"""
function nonzero(t::AbstractTiling)::Int
    return 1
end
